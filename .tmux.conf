##### tmux ≥ 3.5a friendly defaults #####
set -g default-terminal "tmux-256color"
set -g mouse on
set -g status-keys vi
setw -g mode-keys vi
set -g repeat-time 250
set -g escape-time 10
set -g focus-events on
set -g renumber-windows on

# Better key + color support in modern tmux/terms (helps Neovim too)
set -gq allow-passthrough on
set -as terminal-features 'xterm*:extkeys'
set -as terminal-features 'xterm-256color:RGB'

##### Make tmux feel like your Neovim navigation #####

# 1) Pane movement with Alt-h/j/k/l (like your <M-hjkl>)
bind M-h select-pane -L
bind M-j select-pane -D
bind M-k select-pane -U
bind M-l select-pane -R

# 3) Layout helpers (≈ <M-=> equalize, <M--> / <M-\> “maximize axis”)
bind M-=  select-layout tiled          # equalize panes (≈ <C-w>=)
bind M--  select-layout main-horizontal
bind "M-\\" select-layout main-vertical

# optional: default binding for Prefix+Space cycles layouts — remove if it annoys you
unbind Space                    # (removes “next-layout” on Prefix+Space)

# 5) Quick workspace switcher (≈ your <M-Space> launcher)
bind Space choose-tree -Zw           # fuzzy-ish chooser for sessions/windows/panes

# 6) Zoom current pane (handy, parallels Vim’s “make one split big” vibe)
bind z resize-pane -Z

# Optional: vi-like copy-mode selects
bind -Tcopy-mode-vi v send -X begin-selection
bind -Tcopy-mode-vi V send -X select-line

##### MapWinCmd-style split launchers #########################################
# Usage (after your tmux prefix, e.g. C-b):
#   Prefix h|j|k|l  then one of:  t T e w b f F r R s d
#   Prefix , (comma) then one of:  t T e w b f F r R s d   -> new window
#   Prefix . (dot)   then one of:  t T e w b f F r R s d   -> current pane
#
# Directions match your Vim MapWinCmd:
#   h -> split left      (aboveleft vnew)
#   j -> split below     (belowright new)
#   k -> split above     (aboveleft new)
#   l -> split right     (belowright vnew)
#
# Notes:
# - Everything starts in the *current pane's cwd*.
# - Keys with a “space” in Vim (T/F/R/e) are mapped as prompts prefilled with that text.
# - Swap any sample commands for your favorites (fzf, nnn, yazi, lazygit, etc.).

# Enter “direction tables”
bind h switch-client -T wincmd-h
bind j switch-client -T wincmd-j
bind k switch-client -T wincmd-k
bind l switch-client -T wincmd-l

# “Tabs” (new window) and “just run it here” tables
bind , switch-client -T wincmd-newwin
bind . switch-client -T wincmd-current

# ---- helpers (inline via concrete binds) ----
# Left  (new pane on the LEFT of current)
bind -T wincmd-h t split-window -hb -c "#{pane_current_path}"
bind -T wincmd-h e command-prompt -I "nvim " \
  "split-window -hb -c '#{pane_current_path}' '%%'"
bind -T wincmd-h f split-window -hb -c "#{pane_current_path}" "sh -lc 'fzf || $SHELL'"
bind -T wincmd-h F command-prompt -I "fzf " \
  "split-window -hb -c '#{pane_current_path}' 'sh -lc \"%% || $SHELL\"'"
bind -T wincmd-h r split-window -hb -c "#{pane_current_path}" "sh -lc 'rg --hidden --line-number || $SHELL'"
bind -T wincmd-h R command-prompt -I "rg " \
  "split-window -hb -c '#{pane_current_path}' 'sh -lc \"%% || $SHELL\"'"
bind -T wincmd-h w split-window -hb -c "#{pane_current_path}" "sh -lc 'nvim +Scratch || nvim'"
bind -T wincmd-h b split-window -hb -c "#{pane_current_path}" "sh -lc 'nvim +\"Telescope buffers\" || nvim'"
bind -T wincmd-h s split-window -hb -c "#{pane_current_path}" "sh -lc 'nvim +Startify || nvim'"
bind -T wincmd-h d split-window -hb -c "#{pane_current_path}" "sh -lc 'nvim ~/.todo || nvim ~/.todo'"
# “OpenWithName ” -> prompt for [Title, Command], set pane title and run it
bind -T wincmd-h T command-prompt -p "Pane title,Command" \
  "split-window -hb -c '#{pane_current_path}' '%%2' ; select-pane -T '%%1'"

# Down (new pane BELOW)
bind -T wincmd-j t split-window -v  -c "#{pane_current_path}"
bind -T wincmd-j e command-prompt -I "nvim " \
  "split-window -v  -c '#{pane_current_path}' '%%'"
bind -T wincmd-j f split-window -v  -c "#{pane_current_path}" "sh -lc 'fzf || $SHELL'"
bind -T wincmd-j F command-prompt -I "fzf " \
  "split-window -v  -c '#{pane_current_path}' 'sh -lc \"%% || $SHELL\"'"
bind -T wincmd-j r split-window -v  -c "#{pane_current_path}" "sh -lc 'rg --hidden --line-number || $SHELL'"
bind -T wincmd-j R command-prompt -I "rg " \
  "split-window -v  -c '#{pane_current_path}' 'sh -lc \"%% || $SHELL\"'"
bind -T wincmd-j w split-window -v  -c "#{pane_current_path}" "sh -lc 'nvim +Scratch || nvim'"
bind -T wincmd-j b split-window -v  -c "#{pane_current_path}" "sh -lc 'nvim +\"Telescope buffers\" || nvim'"
bind -T wincmd-j s split-window -v  -c "#{pane_current_path}" "sh -lc 'nvim +Startify || nvim'"
bind -T wincmd-j d split-window -v  -c "#{pane_current_path}" "sh -lc 'nvim ~/.todo || nvim ~/.todo'"
bind -T wincmd-j T command-prompt -p "Pane title,Command" \
  "split-window -v  -c '#{pane_current_path}' '%%2' ; select-pane -T '%%1'"

# Up (new pane ABOVE)
bind -T wincmd-k t split-window -vb -c "#{pane_current_path}"
bind -T wincmd-k e command-prompt -I "nvim " \
  "split-window -vb -c '#{pane_current_path}' '%%'"
bind -T wincmd-k f split-window -vb -c "#{pane_current_path}" "sh -lc 'fzf || $SHELL'"
bind -T wincmd-k F command-prompt -I "fzf " \
  "split-window -vb -c '#{pane_current_path}' 'sh -lc \"%% || $SHELL\"'"
bind -T wincmd-k r split-window -vb -c "#{pane_current_path}" "sh -lc 'rg --hidden --line-number || $SHELL'"
bind -T wincmd-k R command-prompt -I "rg " \
  "split-window -vb -c '#{pane_current_path}' 'sh -lc \"%% || $SHELL\"'"
bind -T wincmd-k w split-window -vb -c "#{pane_current_path}" "sh -lc 'nvim +Scratch || nvim'"
bind -T wincmd-k b split-window -vb -c "#{pane_current_path}" "sh -lc 'nvim +\"Telescope buffers\" || nvim'"
bind -T wincmd-k s split-window -vb -c "#{pane_current_path}" "sh -lc 'nvim +Startify || nvim'"
bind -T wincmd-k d split-window -vb -c "#{pane_current_path}" "sh -lc 'nvim ~/.todo || nvim ~/.todo'"
bind -T wincmd-k T command-prompt -p "Pane title,Command" \
  "split-window -vb -c '#{pane_current_path}' '%%2' ; select-pane -T '%%1'"

# Right (new pane on the RIGHT)
bind -T wincmd-l t split-window -h  -c "#{pane_current_path}"
bind -T wincmd-l e command-prompt -I "nvim " \
  "split-window -h  -c '#{pane_current_path}' '%%'"
bind -T wincmd-l f split-window -h  -c "#{pane_current_path}" "sh -lc 'fzf || $SHELL'"
bind -T wincmd-l F command-prompt -I "fzf " \
  "split-window -h  -c '#{pane_current_path}' 'sh -lc \"%% || $SHELL\"'"
bind -T wincmd-l r split-window -h  -c "#{pane_current_path}" "sh -lc 'rg --hidden --line-number || $SHELL'"
bind -T wincmd-l R command-prompt -I "rg " \
  "split-window -h  -c '#{pane_current_path}' 'sh -lc \"%% || $SHELL\"'"
bind -T wincmd-l w split-window -h  -c "#{pane_current_path}" "sh -lc 'nvim +Scratch || nvim'"
bind -T wincmd-l b split-window -h  -c "#{pane_current_path}" "sh -lc 'nvim +\"Telescope buffers\" || nvim'"
bind -T wincmd-l s split-window -h  -c "#{pane_current_path}" "sh -lc 'nvim +Startify || nvim'"
bind -T wincmd-l d split-window -h  -c "#{pane_current_path}" "sh -lc 'nvim ~/.todo || nvim ~/.todo'"
bind -T wincmd-l T command-prompt -p "Pane title,Command" \
  "split-window -h  -c '#{pane_current_path}' '%%2' ; select-pane -T '%%1'"

# New “tab” (window) variants — Prefix + , then key
bind -T wincmd-newwin t new-window -c "#{pane_current_path}"
bind -T wincmd-newwin e command-prompt -I "nvim " \
  "new-window -c '#{pane_current_path}' '%%'"
bind -T wincmd-newwin f new-window -c "#{pane_current_path}" "sh -lc 'fzf || $SHELL'"
bind -T wincmd-newwin F command-prompt -I "fzf " \
  "new-window -c '#{pane_current_path}' 'sh -lc \"%% || $SHELL\"'"
bind -T wincmd-newwin r new-window -c "#{pane_current_path}" "sh -lc 'rg --hidden --line-number || $SHELL'"
bind -T wincmd-newwin R command-prompt -I "rg " \
  "new-window -c '#{pane_current_path}' 'sh -lc \"%% || $SHELL\"'"
bind -T wincmd-newwin w new-window -c "#{pane_current_path}" "sh -lc 'nvim +Scratch || nvim'"
bind -T wincmd-newwin b new-window -c "#{pane_current_path}" "sh -lc 'nvim +\"Telescope buffers\" || nvim'"
bind -T wincmd-newwin s new-window -c "#{pane_current_path}" "sh -lc 'nvim +Startify || nvim'"
bind -T wincmd-newwin d new-window -c "#{pane_current_path}" "sh -lc 'nvim ~/.todo || nvim ~/.todo'"
bind -T wincmd-newwin T command-prompt -p "Window name,Command" \
  "new-window -n '%%1' -c '#{pane_current_path}' '%%2'"

# Run in CURRENT pane — Prefix + . then key
bind -T wincmd-current e command-prompt -I "nvim "   "send-keys -l '%%' \; send-keys C-m"
bind -T wincmd-current f send-keys -l "fzf" \; send-keys C-m
bind -T wincmd-current F command-prompt -I "fzf "    "send-keys -l '%%' \; send-keys C-m"
bind -T wincmd-current r send-keys -l "rg --hidden --line-number" \; send-keys C-m
bind -T wincmd-current R command-prompt -I "rg "     "send-keys -l '%%' \; send-keys C-m"
bind -T wincmd-current w send-keys -l "nvim +Scratch" \; send-keys C-m
bind -T wincmd-current b send-keys -l "nvim +\"Telescope buffers\"" \; send-keys C-m
bind -T wincmd-current s send-keys -l "nvim +Startify" \; send-keys C-m
bind -T wincmd-current d send-keys -l "nvim ~/.todo" \; send-keys C-m
bind -T wincmd-current t send-keys C-m          # (already in a shell; just give you a fresh prompt)
bind -T wincmd-current T command-prompt -I ""   "send-keys -l '%%' \; send-keys C-m"

###############################################################################
# change prefix to Ctrl-Space (or use C-@ if your terminal maps Ctrl-Space that way)
unbind C-b
set -g prefix C-Space           # or: set -g prefix C-@
bind C-Space send-prefix        # lets you send prefix to nested tmux (press twice)
